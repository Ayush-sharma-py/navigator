#include <gtest/gtest.h>
#include <memory>
#include "nova_gps/types.hpp"
#include "nova_gps/UBX.hpp"
using namespace Nova;


TEST(TestUBX, read_ack) {
  ByteBuffer buf(10, std::unique_ptr<uint8_t[]>(new uint8_t[10]{0xB5, 0x62, 0x05, 0x01, 0x02, 0x00, 0xEF, 0xBE, 0xB4, 0xB5}));
  auto msgl = Nova::UBX::parse_ubx_messages(buf);
  ASSERT_EQ((*msgl).size(), 1u);
  auto msg = std::move((*msgl)[0]);
  ASSERT_EQ(msg->mclass, 0x05);
  ASSERT_EQ(msg->id, 0x01);
  ASSERT_EQ(msg->checksum, 0xB5B4);
  ASSERT_EQ(msg->data->read_word(), 0xBEEF);
}

TEST(TestUBX, read_two) {
  ByteBuffer buf(20, std::unique_ptr<uint8_t[]>(new uint8_t[20]{0xB5, 0x62, 0x05, 0x01, 0x02, 0x00, 0xEF, 0xBE, 0xB4, 0xB5,
                                                                0xB5, 0x62, 0x05, 0x01, 0x02, 0x00, 0xEF, 0xBE, 0xB4, 0xB5}));
  auto msgl = Nova::UBX::parse_ubx_messages(buf);
  ASSERT_EQ((*msgl).size(), 2u);
}

TEST(TestUBX, read_too_big) {
  ByteBuffer buf(10, std::unique_ptr<uint8_t[]>(new uint8_t[10]{0xB5, 0x62, 0x05, 0x01, 0x02, 0x40, 0xEF, 0xBE, 0xB4, 0xB5}));
  ASSERT_ANY_THROW(Nova::UBX::parse_ubx_messages(buf));
}
/*
TEST(TestUBX, bad_checksum) {
  ByteBuffer buf(10, std::unique_ptr<uint8_t[]>(new uint8_t[10]{0xB5, 0x62, 0x05, 0x01, 0x02, 0x00, 0xEF, 0xBE, 0xAA, 0xAB}));
  ASSERT_ANY_THROW(Nova::UBX::parse_ubx_messages(buf));
}
*/
/*
TEST(TestUBX, read_hnrpvt) {
  unsigned char data_bin[] = {
  0xb5, 0x62, 0x28, 0x00, 0x48, 0x00, 0x14, 0x1a, 0x57, 0x0f, 0xe6, 0x07,
  0x02, 0x01, 0x17, 0x1d, 0x08, 0x37, 0xf6, 0xd0, 0xa9, 0x20, 0x04, 0x1d,
  0x6c, 0x15, 0x76, 0xe7, 0x54, 0xc6, 0xc4, 0x32, 0xa9, 0x13, 0xe9, 0xf1,
  0x03, 0x00, 0xae, 0x54, 0x04, 0x00, 0x32, 0x1f, 0x00, 0x00, 0x61, 0x20,
  0x00, 0x00, 0x30, 0x13, 0x98, 0x01, 0x30, 0x13, 0x98, 0x01, 0x15, 0x06,
  0x00, 0x00, 0x14, 0x07, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x6d, 0x8a,
  0x00, 0x00, 0x44, 0x2a, 0x30, 0x32, 0xe1, 0xbe
};
  ByteBuffer buf(80, std::unique_ptr<uint8_t[]>(data_bin));
  auto msgl = Nova::UBX::parse_ubx_messages(buf);
  //ASSERT_ANY_THROW(buf.read_byte()); we're definitely reading the whole thing
  UBX::HNRPVT yea;
  ASSERT_NO_THROW(yea = Nova::UBX::parse_hnrpvt(std::move((*msgl)[0])));
  msgl->pop_back();
  //std::cout << yea << std::endl;
}
*/